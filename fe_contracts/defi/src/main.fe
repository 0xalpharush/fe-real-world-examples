
use std::traits::{Min, Max}
use raw_call::{RawCallHelper, MemoryEncoding}
use interfaces::{ERC20, ISwapRouter, ExactInputSingleParams}


impl MemoryEncoding for ExactInputSingleParams {

    fn write_mem(self) {
        self.abi_encode()
    }

    fn byte_count(self) -> u16 {
        return 256
    }
}

const DAI: address = 0x6B175474E89094C44Da98b954EedeAC495271d0F
const WETH9: address = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2


// For this example, we will set the pool fee to 0.3%.
const poolFee: u16 = 3000

contract SwapExamples {

    swapRouter: ISwapRouter

    pub fn __init__(mut self, _swapRouter: ISwapRouter) {
        self.swapRouter = _swapRouter
    }

    pub fn swap_exact_input_single(mut self, mut ctx: Context, amountIn: u256) -> u256 {
        // msg.sender must approve this contract

        // Transfer the specified amount of DAI to this contract.
        ERC20(DAI).transferFrom(ctx, sender: ctx.msg_sender(), recipient: ctx.self_address(), value: amountIn)

        // Approve the router to spend DAI.
        // TransferHelper.safeApprove(DAI, address(swapRouter), amountIn);
        ERC20(DAI).approve(ctx, spender: address(self.swapRouter), value: amountIn)

        // Naively set amountOutMinimum to 0. In production, use an oracle or other data source to choose a safer value for amountOutMinimum.
        // We also set the sqrtPriceLimitx96 to be 0 to ensure we swap our exact input amount
        let params: ExactInputSingleParams = ExactInputSingleParams(
             tokenIn: DAI,
             tokenOut: WETH9,
             fee: 3000,
             recipient: ctx.msg_sender(),
             deadline: ctx.block_timestamp(),
             amountIn: amountIn,
             amountOutMinimum: 0,
             sqrtPriceLimitX96: 0,
         );

        // We can not just call self.swapRouter.exactInputSingle(params) because the function selector uses
        // types such as `uint160` and `uint24` that do not have an equivalent in Fe and hence we can not
        // match the function selector. The `RawCallHelper` relies on `unsafe` code work around that.
        return RawCallHelper::call(address(self.swapRouter), 0x414bf389, data: params).to_u256()
    }
}

