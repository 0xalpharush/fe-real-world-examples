
/// Trait used to write data to memory and get the byte count of the data
pub trait MemoryEncoding {
    fn write_mem(self);
    fn byte_count(self) -> u16;
}

/// Helper to perform contract calls which aren't natively supported in current Fe.
/// This is currently needed when calling functions on solidity contracts that contain
/// data types that are not supported in Fe such as `uint24`.
pub struct RawCallHelper {

    /// Get the next available memory location
    pub unsafe fn avail() -> u256 {
        let mut ptr: u256 = std::evm::mload(offset: 64)
        if ptr == 0x00 {
            ptr = 96
        }
        return ptr
    }

    /// Call a function directly by its selector on the given address. 
    pub unsafe fn call<T: MemoryEncoding>(_ addr: address, _ selector: u32, data: T){
        let input_offset: u256 = RawCallHelper::avail()
        [selector]
        data.write_mem()

        let success: u256 = std::evm::call(
            gas: std::evm::gas_remaining(),
            addr,
            value: 0,
            input_offset,
            input_len: 4 + data.byte_count(),
            output_offset: 0,
            output_len: 0
        )
        if success == 0 {
            revert
        }
    }
}




